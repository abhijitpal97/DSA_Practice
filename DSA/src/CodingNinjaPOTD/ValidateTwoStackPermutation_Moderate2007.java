package CodingNinjaPOTD;
import java.util.*;

public class ValidateTwoStackPermutation_Moderate2007 {
	
	public static void main(String[] args)
	{
		List<Integer> list1 = new ArrayList<>(Arrays.asList(308,464,26,354,481,281,424,497,457,483,177,333,123,467,454,465,298,283,20,440,236,420,323,129,179,444,494,432,317,220,460,300,288,401,88,490,40,116,130,163,73,211,292,170,413,93,95,446,451,241,310,204,278,312,269,5,297,387,268,351,16,435,23,270,318,246,244,416,53,445,146,395,134,327,469,242,364,344,101,188,368,421,68,154,417,58,137,449,274,365,434,218,304,13,47,340,425,2,102,393,69,477,311,124,474,90,285,28,366,44,404,197,25,4,141,326,178,377,98,267,66,251,214,237,176,279,135,367,411,356,42,140,375,361,72,57,182,233,257,231,10,455,458,398,31,345,78,471,156,60,144,22,479,35,216,374,74,316,381,302,461,49,45,75,221,240,437,436,199,9,484,260,180,143,468,86,372,442,219,473,222,286,459,402,34,215,478,331,37,295,189,39,299,370,210,48,338,320));
		List<Integer> list2 = new ArrayList<>(Arrays.asList(436,437,240,221,75,45,49,461,302,381,316,74,374,216,35,479,22,144,60,156,471,78,345,31,398,458,455,10,231,257,233,182,57,72,361,375,140,42,356,411,367,135,279,176,237,214,251,66,267,98,377,178,326,141,4,25,197,404,44,366,28,285,90,474,124,311,477,69,393,102,2,425,340,47,13,304,218,434,365,274,449,137,58,417,154,68,421,368,188,101,344,364,242,469,327,134,395,146,445,53,416,244,246,318,270,23,435,16,351,268,387,297,5,269,312,278,204,310,241,451,446,95,93,413,170,292,211,73,163,130,116,40,490,88,401,288,300,460,220,317,432,494,444,179,129,323,420,236,440,20,283,298,465,454,467,123,333,177,483,457,497,424,281,481,354,26,464,308,180,260,484,9,199,86,468,143,372,402,459,286,222,473,219,442,331,478,215,34,320,338,48,210,370,299,39,189,295,37));
		
		boolean res = validStackPermutation(list1, list2);
		System.out.println(res);
	}
	
    public static boolean validStackPermutation(List<Integer> list1, List<Integer> list2){
        // Write your code here.
        Stack<Integer> stack = new Stack<>();
        int i = 0;
        int j = 0;
        int n = list1.size();
        while(i< n && j<n)
        {
            stack.push(list1.get(i));
            i++;
//            System.out.println(stack.peek().intValue()  + " --- "+ list2.get(j).intValue() );
            while(!stack.isEmpty() && stack.peek().intValue() == list2.get(j).intValue() )
            {
                stack.pop();
                j++;
            }
        }

        return stack.isEmpty();
    }
}